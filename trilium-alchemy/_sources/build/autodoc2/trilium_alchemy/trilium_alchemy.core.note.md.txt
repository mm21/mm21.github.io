(trilium_alchemy.core.note)=
# `note`

```{py:module} trilium_alchemy.core.note
```

```{autodoc2-docstring} trilium_alchemy.core.note
:allowtitles:
```

```{toctree}
:hidden:

trilium_alchemy.core.note.attributes
trilium_alchemy.core.note.branches
trilium_alchemy.core.note.content
```

### Class index

:::symbol-category
```{rubric} Canonical
```
:::

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`Note <trilium_alchemy.core.note.Note>`
  - ```{autodoc2-docstring} trilium_alchemy.core.note.Note
    :summary:
    ```

````

### Symbols

`````{py:class} Note(title: str | None = None, note_type: str | None = None, mime: str | None = None, parents: collections.abc.Iterable[trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch] | trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch | None = None, children: collections.abc.Iterable[trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch] | None = None, attributes: collections.abc.Iterable[trilium_alchemy.core.attribute.BaseAttribute] | None = None, content: str | bytes | typing.IO | None = None, note_id: str | None = None, template: trilium_alchemy.core.note.note.Note | type[trilium_alchemy.core.note.note.Note] | None = None, session: trilium_alchemy.core.session.Session | None = None, **kwargs)
:canonical: trilium_alchemy.core.note.Note

```{autodoc2-docstring} trilium_alchemy.core.note.Note.__init__
```

```{rubric} Bases:
```
{py:obj}`trilium_alchemy.core.entity.BaseEntity`
```{rubric} Aliases:
```
`trilium_alchemy.Note`\
`trilium_alchemy.core.Note`
```{autodoc2-docstring} trilium_alchemy.core.note.Note
```

````{py:property} note_id
:canonical: trilium_alchemy.core.note.Note.note_id
:type: str | None

```{autodoc2-docstring} trilium_alchemy.core.note.Note.note_id
```

````

````{py:property} title
:canonical: trilium_alchemy.core.note.Note.title
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.title
```

````

````{py:property} note_type
:canonical: trilium_alchemy.core.note.Note.note_type
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.note_type
```

````

````{py:property} mime
:canonical: trilium_alchemy.core.note.Note.mime
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.mime
```

````

````{py:property} is_protected
:canonical: trilium_alchemy.core.note.Note.is_protected
:type: bool

```{autodoc2-docstring} trilium_alchemy.core.note.Note.is_protected
```

````

````{py:property} date_created
:canonical: trilium_alchemy.core.note.Note.date_created
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.date_created
```

````

````{py:property} date_modified
:canonical: trilium_alchemy.core.note.Note.date_modified
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.date_modified
```

````

````{py:property} utc_date_created
:canonical: trilium_alchemy.core.note.Note.utc_date_created
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.utc_date_created
```

````

````{py:property} utc_date_modified
:canonical: trilium_alchemy.core.note.Note.utc_date_modified
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.utc_date_modified
```

````

````{py:property} attributes
:canonical: trilium_alchemy.core.note.Note.attributes
:type: trilium_alchemy.core.note.attributes.attributes.Attributes

```{autodoc2-docstring} trilium_alchemy.core.note.Note.attributes
```

````

````{py:property} labels
:canonical: trilium_alchemy.core.note.Note.labels
:type: trilium_alchemy.core.note.attributes.labels.Labels

```{autodoc2-docstring} trilium_alchemy.core.note.Note.labels
```

````

````{py:property} relations
:canonical: trilium_alchemy.core.note.Note.relations
:type: trilium_alchemy.core.note.attributes.relations.Relations

```{autodoc2-docstring} trilium_alchemy.core.note.Note.relations
```

````

````{py:property} branches
:canonical: trilium_alchemy.core.note.Note.branches
:type: trilium_alchemy.core.note.branches.Branches

```{autodoc2-docstring} trilium_alchemy.core.note.Note.branches
```

````

````{py:property} parents
:canonical: trilium_alchemy.core.note.Note.parents
:type: trilium_alchemy.core.note.branches.ParentNotes

```{autodoc2-docstring} trilium_alchemy.core.note.Note.parents
```

````

````{py:property} children
:canonical: trilium_alchemy.core.note.Note.children
:type: trilium_alchemy.core.note.branches.ChildNotes

```{autodoc2-docstring} trilium_alchemy.core.note.Note.children
```

````

````{py:property} content
:canonical: trilium_alchemy.core.note.Note.content
:type: str | bytes

```{autodoc2-docstring} trilium_alchemy.core.note.Note.content
```

````

````{py:property} content_str
:canonical: trilium_alchemy.core.note.Note.content_str
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.content_str
```

````

````{py:property} content_bin
:canonical: trilium_alchemy.core.note.Note.content_bin
:type: bytes

```{autodoc2-docstring} trilium_alchemy.core.note.Note.content_bin
```

````

````{py:property} blob_id
:canonical: trilium_alchemy.core.note.Note.blob_id
:type: str

```{autodoc2-docstring} trilium_alchemy.core.note.Note.blob_id
```

````

````{py:property} is_string
:canonical: trilium_alchemy.core.note.Note.is_string
:type: bool

```{autodoc2-docstring} trilium_alchemy.core.note.Note.is_string
```

````

````{py:property} paths
:canonical: trilium_alchemy.core.note.Note.paths
:type: list[list[trilium_alchemy.core.note.note.Note]]

```{autodoc2-docstring} trilium_alchemy.core.note.Note.paths
```

````

````{py:property} paths_str
:canonical: trilium_alchemy.core.note.Note.paths_str
:type: list[str]

```{autodoc2-docstring} trilium_alchemy.core.note.Note.paths_str
```

````

````{py:property} state
:canonical: trilium_alchemy.core.note.Note.state
:type: trilium_alchemy.core.entity.types.State

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.state
```

````

````{py:property} session
:canonical: trilium_alchemy.core.note.Note.session
:type: trilium_alchemy.core.session.Session

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.session
```

````

````{py:property} str_short
:canonical: trilium_alchemy.core.note.Note.str_short
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.str_short
```

````

````{py:property} str_summary
:canonical: trilium_alchemy.core.note.Note.str_summary
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.str_summary
```

````

````{py:method} get(name: str, default: str | None = None) -> str | None
:canonical: trilium_alchemy.core.note.Note.get
```{autodoc2-docstring} trilium_alchemy.core.note.Note.get
```

````

````{py:method} copy(deep: bool = False) -> trilium_alchemy.core.note.note.Note
:canonical: trilium_alchemy.core.note.Note.copy
```{autodoc2-docstring} trilium_alchemy.core.note.Note.copy
```

````

````{py:method} sync_template(template: trilium_alchemy.core.note.note.Note)
:canonical: trilium_alchemy.core.note.Note.sync_template
```{autodoc2-docstring} trilium_alchemy.core.note.Note.sync_template
```

````

````{py:method} transmute(note_cls: type[trilium_alchemy.core.note.note.Note.transmute.NoteT]) -> trilium_alchemy.core.note.note.Note.transmute.NoteT
:canonical: trilium_alchemy.core.note.Note.transmute
```{autodoc2-docstring} trilium_alchemy.core.note.Note.transmute
```

````

````{py:method} export_zip(dest_path: pathlib.Path, export_format: typing.Literal[html, markdown] = 'html')
:canonical: trilium_alchemy.core.note.Note.export_zip
```{autodoc2-docstring} trilium_alchemy.core.note.Note.export_zip
```

````

````{py:method} import_zip(src_path: pathlib.Path) -> trilium_alchemy.core.note.note.Note
:canonical: trilium_alchemy.core.note.Note.import_zip
```{autodoc2-docstring} trilium_alchemy.core.note.Note.import_zip
```

````

````{py:method} flush()
:canonical: trilium_alchemy.core.note.Note.flush
```{autodoc2-docstring} trilium_alchemy.core.note.Note.flush
```

````

````{py:method} invalidate()
:canonical: trilium_alchemy.core.note.Note.invalidate
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.invalidate
```

````

````{py:method} delete()
:canonical: trilium_alchemy.core.note.Note.delete
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.delete
```

````

````{py:method} refresh()
:canonical: trilium_alchemy.core.note.Note.refresh
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.note.Note.refresh
```

````

`````
