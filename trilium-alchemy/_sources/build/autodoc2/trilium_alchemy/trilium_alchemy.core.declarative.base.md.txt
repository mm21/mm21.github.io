(trilium_alchemy.core.declarative.base)=
# `base`

```{py:module} trilium_alchemy.core.declarative.base
```

```{autodoc2-docstring} trilium_alchemy.core.declarative.base
:allowtitles:
```

### Class index

:::symbol-category
```{rubric} Canonical
```
:::

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`BaseDeclarativeNote <trilium_alchemy.core.declarative.base.BaseDeclarativeNote>`
  - ```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote
    :summary:
    ```

* - {py:obj}`BaseDeclarativeMixin <trilium_alchemy.core.declarative.base.BaseDeclarativeMixin>`
  - ```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin
    :summary:
    ```

````

### Symbols

`````{py:class} BaseDeclarativeNote(title: str | None = None, note_type: str | None = None, mime: str | None = None, parents: collections.abc.Iterable[trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch] | trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch | None = None, children: collections.abc.Iterable[trilium_alchemy.core.note.note.Note | trilium_alchemy.core.branch.Branch] | None = None, attributes: collections.abc.Iterable[trilium_alchemy.core.attribute.BaseAttribute] | None = None, content: str | bytes | typing.IO | None = None, note_id: str | None = None, template: trilium_alchemy.core.note.note.Note | type[trilium_alchemy.core.note.note.Note] | None = None, session: trilium_alchemy.core.session.Session | None = None, **kwargs)
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.__init__
```

```{rubric} Bases:
```
{py:obj}`trilium_alchemy.core.note.Note`\
{py:obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{rubric} Aliases:
```
`trilium_alchemy.BaseDeclarativeNote`\
`trilium_alchemy.core.BaseDeclarativeNote`\
`trilium_alchemy.core.declarative.BaseDeclarativeNote`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote
```

````{py:attribute} note_id_
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_
```

````

````{py:attribute} title_
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.title_
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.title_
```

````

````{py:attribute} note_type_
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_type_
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_type_
```

````

````{py:attribute} mime_
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.mime_
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.mime_
```

````

````{py:attribute} content_
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_
:type: str | bytes | typing.IO | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_
```

````

````{py:attribute} content_file
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_file
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_file
```

````

````{py:attribute} note_id_seed
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_seed
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_seed
```

````

````{py:attribute} note_id_segment
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_segment
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_segment
```

````

````{py:attribute} singleton
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.singleton
:type: bool
   `False`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.singleton
```

````

````{py:attribute} idempotent
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.idempotent
:type: bool
   `False`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.idempotent
```

````

````{py:attribute} idempotent_segment
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.idempotent_segment
:type: bool
   `False`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.idempotent_segment
```

````

````{py:attribute} leaf
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.leaf
:type: bool
   `False`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.leaf
```

````

````{py:attribute} hide_new_note
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.hide_new_note
:type: bool
   `False`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.hide_new_note
```

````

````{py:attribute} icon
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.icon
:type: str | None
   `None`{l=python}

*Inherited from:* {obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.icon
```

````

````{py:property} note_id_seed_final
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_seed_final
:type: str | None

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id_seed_final
```

````

````{py:property} note_id
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id
:type: str | None

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_id
```

````

````{py:property} title
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.title
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.title
```

````

````{py:property} note_type
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_type
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.note_type
```

````

````{py:property} mime
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.mime
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.mime
```

````

````{py:property} is_protected
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.is_protected
:type: bool

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.is_protected
```

````

````{py:property} date_created
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.date_created
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.date_created
```

````

````{py:property} date_modified
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.date_modified
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.date_modified
```

````

````{py:property} utc_date_created
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.utc_date_created
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.utc_date_created
```

````

````{py:property} utc_date_modified
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.utc_date_modified
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.utc_date_modified
```

````

````{py:property} attributes
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.attributes
:type: trilium_alchemy.core.note.attributes.attributes.Attributes

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.attributes
```

````

````{py:property} labels
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.labels
:type: trilium_alchemy.core.note.attributes.labels.Labels

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.labels
```

````

````{py:property} relations
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.relations
:type: trilium_alchemy.core.note.attributes.relations.Relations

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.relations
```

````

````{py:property} branches
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.branches
:type: trilium_alchemy.core.note.branches.Branches

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.branches
```

````

````{py:property} parents
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.parents
:type: trilium_alchemy.core.note.branches.ParentNotes

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.parents
```

````

````{py:property} children
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.children
:type: trilium_alchemy.core.note.branches.ChildNotes

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.children
```

````

````{py:property} content
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content
:type: str | bytes

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content
```

````

````{py:property} content_str
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_str
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_str
```

````

````{py:property} content_bin
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_bin
:type: bytes

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.content_bin
```

````

````{py:property} blob_id
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.blob_id
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.blob_id
```

````

````{py:property} is_string
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.is_string
:type: bool

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.is_string
```

````

````{py:property} paths
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.paths
:type: list[list[trilium_alchemy.core.note.note.Note]]

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.paths
```

````

````{py:property} paths_str
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.paths_str
:type: list[str]

*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.paths_str
```

````

````{py:property} state
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.state
:type: trilium_alchemy.core.entity.types.State

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.state
```

````

````{py:property} session
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.session
:type: trilium_alchemy.core.session.Session

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.session
```

````

````{py:property} str_short
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.str_short
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.str_short
```

````

````{py:property} str_summary
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.str_summary
:type: str

*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.str_summary
```

````

````{py:method} get(name: str, default: typing.Any = None) -> str | None
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.get
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.get
```

````

````{py:method} copy(deep: bool = False, content: bool = False) -> trilium_alchemy.core.note.note.Note
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.copy
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.copy
```

````

````{py:method} transmute(note_cls: type[trilium_alchemy.core.note.note.Note.transmute.NoteT]) -> trilium_alchemy.core.note.note.Note.transmute.NoteT
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.transmute
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.transmute
```

````

````{py:method} export_zip(dest_path: pathlib.Path, export_format: typing.Literal[html, markdown] = 'html')
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.export_zip
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.export_zip
```

````

````{py:method} import_zip(src_path: pathlib.Path) -> trilium_alchemy.core.note.note.Note
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.import_zip
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.import_zip
```

````

````{py:method} flush()
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.flush
*Inherited from:* {obj}`trilium_alchemy.core.note.Note`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.flush
```

````

````{py:method} invalidate() -> None
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.invalidate
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.invalidate
```

````

````{py:method} delete() -> None
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.delete
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.delete
```

````

````{py:method} refresh()
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.refresh
*Inherited from:* {obj}`trilium_alchemy.core.entity.BaseEntity`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.refresh
```

````

````{py:method} init(attributes: list[trilium_alchemy.core.attribute.BaseAttribute], children: list[trilium_alchemy.core.note.note.Note | type[trilium_alchemy.core.note.note.Note] | trilium_alchemy.core.branch.Branch])
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.init
*Inherited from:* {obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.init
```

````

````{py:method} create_declarative_label(name: str, value: str = '', inheritable: bool = False) -> trilium_alchemy.core.attribute.Label
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_label
*Inherited from:* {obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_label
```

````

````{py:method} create_declarative_relation(name: str, target: trilium_alchemy.core.note.note.Note, inheritable: bool = False) -> trilium_alchemy.core.attribute.Relation
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_relation
*Inherited from:* {obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_relation
```

````

````{py:method} create_declarative_child(child_cls: type[trilium_alchemy.core.declarative.base.BaseDeclarativeNote], **kwargs) -> trilium_alchemy.core.branch.Branch
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_child
*Inherited from:* {obj}`trilium_alchemy.core.declarative.base.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeNote.create_declarative_child
```

````

`````

`````{py:class} BaseDeclarativeMixin(session: trilium_alchemy.core.session.Session)
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.__init__
```

```{rubric} Bases:
```
{py:obj}`abc.ABC`\
{py:obj}`trilium_alchemy.core.session.SessionContainer`
```{rubric} Aliases:
```
`trilium_alchemy.BaseDeclarativeMixin`\
`trilium_alchemy.core.BaseDeclarativeMixin`\
`trilium_alchemy.core.declarative.BaseDeclarativeMixin`
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin
```

````{py:attribute} icon
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.icon
:type: str | None
   `None`{l=python}

```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.icon
```

````

````{py:method} init(attributes: list[trilium_alchemy.core.attribute.BaseAttribute], children: list[trilium_alchemy.core.note.note.Note | type[trilium_alchemy.core.note.note.Note] | trilium_alchemy.core.branch.Branch])
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.init
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.init
```

````

````{py:method} create_declarative_label(name: str, value: str = '', inheritable: bool = False) -> trilium_alchemy.core.attribute.Label
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_label
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_label
```

````

````{py:method} create_declarative_relation(name: str, target: trilium_alchemy.core.note.note.Note, inheritable: bool = False) -> trilium_alchemy.core.attribute.Relation
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_relation
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_relation
```

````

````{py:method} create_declarative_child(child_cls: type[trilium_alchemy.core.declarative.base.BaseDeclarativeNote], **kwargs) -> trilium_alchemy.core.branch.Branch
:canonical: trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_child
```{autodoc2-docstring} trilium_alchemy.core.declarative.base.BaseDeclarativeMixin.create_declarative_child
```

````

`````
